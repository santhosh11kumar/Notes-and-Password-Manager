"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = __importDefault(require("crypto"));
class Encryption {
    constructor(config) {
        this.encrypt = (value, isInt = false) => {
            if (!value) {
                throw Error("A value is required!");
            }
            const cipher = crypto_1.default.createCipheriv(this.algorithm, this.key, this.iv);
            let buffer = Buffer.from(String(value), "utf8").toString("binary");
            if (isInt) {
                cipher.setAutoPadding(false);
                const buf = Buffer.allocUnsafe(8);
                buf.writeBigUInt64BE(BigInt(value));
                buffer = buf.toString("binary");
            }
            const firstPart = cipher.update(buffer, "binary", "base64");
            const finalPart = cipher.final("base64");
            return `${firstPart}${finalPart}`;
        };
        this.decrypt = (token, isInt = false) => {
            if (!token) {
                throw Error("A token is required!");
            }
            const decipher = crypto_1.default.createDecipheriv(this.algorithm, this.key, this.iv);
            if (isInt) {
                decipher.setAutoPadding(false);
            }
            const buffer = Buffer.from(token, "base64").toString("hex");
            const firstPart = decipher.update(buffer, "hex", "base64");
            const finalPart = decipher.final("base64") || "";
            const decrypted = `${firstPart}${finalPart}`;
            const buf = Buffer.from(decrypted, "base64");
            if (isInt) {
                return buf.readBigUInt64BE(0).toString();
            }
            return buf.toString("utf8");
        };
        this.algorithm = config.algorithm || "";
        this.salt = config.salt || "";
        const ENCRYPTION_KEY = config.encryptionKey
            ? Buffer.from(config.encryptionKey).toString("hex")
            : "";
        this.key = ENCRYPTION_KEY ? Buffer.from(ENCRYPTION_KEY, "hex") : "";
        this.iv = config.iv || null;
        if (!this.algorithm && !this.key) {
            throw Error("Configuration Error!");
        }
    }
}
exports.default = Encryption;
